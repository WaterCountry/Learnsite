<link href="../code/css/font-awesome.min.css" rel="stylesheet" type="text/css" />
<style type="text/css">
#editor{
  position:fixed;
  height: 100vh;
  background-color: #fef8e4;
  width:100%;
}
#divmain{
  padding: 0px;

}
#divright{
  float: left;
  color: #333;
  left: 0px; 
  background-color:  #fef8e4;
  word-wrap:break-word; 
  overflow-y:auto; 
  margin: 4px;
}

#divleft{
    position: absolute;
    box-shadow:0px 0px 6px #999;
}

.btn{
  border: 1px solid #e0dbcb; 
  text-decoration: none;
  background-color: #f1ebd4;
}

i {
  padding: 4px;
}

#centerbar{
  position: absolute;
  margin: 20px;
  z-index: 999;
  width: 900px;
  text-align: right;
}
#result{
  position: absolute;
  bottom:120px;
  right: 50px;
  width:550px;
  overflow-x: hidden; 
  z-index: 999;
}
#output{ 
  width:550px;
  height:400px;
  margin: 10px; 
  text-align:left;
}
#cv{ 
  position: absolute;
  font-size: 20px;
  color: #000;
  width:550px;
  height:400px;
}

.input{
	border:1px solid #ccc;
}
.input:focus{
	outline: none;
	border:1px solid #ccc;
}
</style>

<div id="divmain">
<div id="divright">
<div  id="centerbar">
<button  onclick="runit()" type="button" > 
<i class="fa fa-play" aria-hidden="true"></i>运行
</button>
<span class="sp"></span>

</div> 

</div>

<div id="result">
<div id="cv"></div>
<pre id="output" > </pre>
</div>

<div id="divleft">
<div id="editor">
</div>

</div>
</div>

  <script src="../code/build/src/ace.js" type="text/javascript"></script>
  <script src="../code/build/src/ext-language_tools.js" type="text/javascript"></script>
  <script src="../code/build/src/ext-beautify.js" type="text/javascript"></script>
  <script type="text/javascript">
      var editor = ace.edit("editor");
      editor.setOptions({
          wrap: true,
          enableLiveAutocompletion: true,
          enableSnippets: true
      });
      editor.setTheme("ace/theme/textmate");
      editor.getSession().setMode("ace/mode/python");
      editor.setFontSize(22);
      editor.setReadOnly(false)
      editor.getSession().setTabSize(4);

  </script>

<script src="../code/skulpt.min.js" type="text/javascript"></script>
<script src="../code/skulpt-stdlib.js" type="text/javascript"></script>
<script src="../code/html2canvas.min.js" type="text/javascript"></script>
<script src="../code/jquery.min.js" type="text/javascript"></script>

<script type="text/javascript">
    var mypre = document.getElementById("output");
    var result = document.getElementById("result");
    var cf = "#codefile#";
    var dictvalue = new Array();
    var codedict = new Array();
    var codefile = decodeURIComponent(window.atob(cf));
    var snum = "teacher";

    if (codefile != '') {
        setcode(codefile,1);
    }

    function outf(text) {
        mypre.innerHTML = mypre.innerHTML + text;
    }
    function builtinRead(x) {
        if (Sk.builtinFiles === undefined || Sk.builtinFiles["files"][x] === undefined)
            throw "File not found: '" + x + "'";
        return Sk.builtinFiles["files"][x];
    }

    function myfun() {
        return new Promise(function (resolve, reject) {
            var myinput = document.createElement("input");
            myinput.setAttribute("type", "text");
            myinput.setAttribute("class", "input");
            mypre.appendChild(myinput);
            myinput.focus();
            result.onclick = function () {
                myinput.focus();
            }

            myinput.onkeypress = function () {
                if (event.keyCode == 13) {
                    args = myinput.value;
                    console.log(args);
                    resolve(args);
                    mypre.removeChild(myinput);
                    temp = mypre.innerText;
                    temp = temp + args;
                    mypre.innerHTML = temp + "\n";
                }
            }
        })
    }


    function runit() {
        var prog = editor.getValue();
        mypre.innerHTML = '';
        output.innerHTML = '';
        Sk.pre = "output";
        Sk.configure({ output: outf, read: builtinRead, __future__: Sk.python3, inputfun: myfun });

        (Sk.TurtleGraphics || (Sk.TurtleGraphics = {})).target = 'cv';
        var myPromise = Sk.misceval.asyncToPromise(function () {
            return Sk.importMainWithBody("<stdin>", false, prog, true);
        });

        myPromise.then(function (mod) {
            console.log('succeed!');
        },
    function (err) {
        var msg = err.toString();
        console.log(msg);
        mypre.innerHTML = msg;
    });
    }


    function history(key, value) {
        sessionStorage.setItem(key, value);
        codedict[key] = value;
        //console.log(codedict);
    }
    var keycount = 0;
    var oldlen = 0;
    var oldcode = '';
    document.onkeyup = keyUp;
    function keyUp() {
        var p = editor.getValue();
        var temp = $.trim(p)
        //len=temp.length;
        if (temp != oldcode) {
            history(keycount, p);
            //oldlen=len;
            oldcode = temp;
            keycount = keycount + 1;
            history('kcount', keycount);
        }
        voice();
    }
    document.onkeydown = function (e) {
        var theEvent = window.event || e;
        var code = theEvent.keyCode || theEvent.which || theEvent.charCode;
        if (code == 13) {
            var p = editor.getValue();
            if (p.indexOf('input') < 0) {
                runit();
            }
            console.log('return');
        }
    }
    var key = 0;
    var kcount = 0;
    function playcode() {
        if (key == 0) console.log('play code begin');
        var tp = sessionStorage.getItem('kcount');
        if (tp != null) {
            kcount = parseInt(tp);
            var value = sessionStorage.getItem(key);
            if (key < kcount) {
                editor.setValue(value);
                key = key + 1;
                voice();
                setTimeout("playcode()", 300);
            } else {
                key = 0;
                console.log('play code end');
            }
        } else {
            console.log('no records');
        }
    }

    function stepcode(n) {
        if (key == 0) console.log('step code begin');
        var tp = sessionStorage.getItem('kcount');
        if (tp != null) {
            console.log('records' + tp);
            kcount = parseInt(tp);
            key = key + n;
            if (key > -1 && key < kcount) {
                console.log('key' + key);
                var value = sessionStorage.getItem(key);
                //console.log(value);
                editor.setValue(value);
                voice();
            } else {
                if (key > kcount) key = 0;
                if (key < 0) key = kcount;
                console.log('current record' + key);
            }
        } else {
            console.log('no records');
        }

    }

    function voice() {
        var audio = document.createElement("audio");
        audio.src = '../code/code.ogg';
        audio.play();
    }

    function random(lower, upper) {
        return Math.floor(Math.random() * (upper - lower + 1)) + lower;
    }

    function code(n) {
        clearit();
        switch (n) {
            case 1:
                editor.setValue(example5);
                break;
            case 2:
                editor.setValue(example4);
                break;
            default:
                var num = random(1, 6);
                var examplename = 'example' + num;
                editor.setValue(eval(examplename));
                //gifshow.src=eval(gifname);
        }
    }
    function setcode() {
        editor.setValue(codefile,1);
    }
    function focus() {
        editor.focus();
    }
    focus();
    function clearit() {
        sessionStorage.clear();
        mypre.innerHTML = '';
        output.innerHTML = '';
    }



    if (sessionStorage.getItem(snum)) {
        console.log("reflash");
        console.log("records" + codedict);
    } else {
        console.log("isload");
        sessionStorage.setItem(snum, true)
    }
    //codedict
    function playdict() {
        if (key == 0) console.log('play code begin');
        var tp = dictvalue['kcount'];

        console.log(codedict);
        console.log('records' + tp);
        if (tp != null) {
            kcount = parseInt(tp);
            var value = dictvalue[key];
            if (key < kcount) {
                editor.setValue(value,1);
                key = key + 1;
                voice();
                setTimeout("playcode()", 300);
            } else {
                key = 0;
                console.log('play code end');
            }
        }
    }

    function stepdict(n) {
        if (key == 0) console.log('step code begin');
        var tp = dictvalue['kcount'];
        if (tp != null) {
            console.log('records' + tp);
            kcount = parseInt(tp);
            key = key + n;
            if (key > -1 && key < kcount) {
                console.log('key' + key);
                var value = dictvalue[key];
                //console.log(value);
                editor.setValue(value,1);
                voice();
            } else {
                if (key > kcount) key = 0;
                if (key < 0) key = kcount;
                console.log('current record' + key);
            }
        } else {
            console.log('no records');
        }

    } 



</script>